/*
5 6
1 2 3 4 1
3 4 1 2 1 3

1 2 3

dyn_prog :

void subsequence(int arr1[], int arr2[], int m, int n, vector<int> &common) {
  int lcs[m + 1][n + 1];

for (int i = 0; i <= m; ++i)
  for (int j = 0; j <= n; ++j) {
    if (i == 0 || j == 0)
      lcs[i][j] = 0;
    else if (arr[i - 1] == arr2[j - 1]) {
      common.push_back(arr[i - 1]);
      lcs[i][j] = 1 + lcs[i - 1][j - 1]
    } else {
      lcs[i][j] = max(lcs[i - 1][j], lcs[i][j - 1]);
    }
  }
}
 */
#include <iostream>
#include <vector>
#include <fstream>
#include <cstring>
using namespace std;

void subsequence(int arr1[], int arr2[], int m, int n) {
  int lcs[m + 1][n + 1];
  bool common[m + 1][n + 1];
  bool check[m];
  memset(check, false, sizeof(check));
  memset(common, false, sizeof(common));
  for (int i = 0; i <= m; ++i)
    for (int j = 0; j <= n; ++j) {
      if (i == 0 || j == 0)
        lcs[i][j] = 0;
      else if (arr1[i - 1] == arr2[j - 1]) {
        common[i][j] = true;
        //check[i - 1] = true;
        lcs[i][j] = 1 + lcs[i - 1][j - 1];
      } else {
        lcs[i][j] = max(lcs[i - 1][j], lcs[i][j - 1]);
      }
    }

  int seq_cnt = 1;
  int previ = -1;
  int prevj = -1;
  for (int i = 0; i <= m; ++i)
    for (int j = 0; j <= n; ++j)
      if (common[i][j]) {
        if (i > previ) {
          cout << arr2[j - 1] << " ";
          prevj = j;
          previ = i;
        }
        ++seq_cnt;
      }
  /*  for (int i = 0; i < m; ++i)
    if (check[i] && i > prev)
      cout << arr1[i] << " ";
  */
}

int main() {
  ifstream in("input1.txt");
  int m, n;
  in >> m >> n;
  int arr1[m], arr2[n];
  for (int i = 0; i < m; ++i)
    in >> arr1[i];
  for (int i = 0; i < n; ++i)
    in >> arr2[i];
  subsequence(arr1, arr2, m, n);
  return 0;
}
